ModuÅ‚: KAMI512

Pliki: kami512.h, kami512.cpp
Opis: Prosty algorytm tworzÄ…cy 512-bitowy (64 bajtowy) hash z dowolnego ciÄ…gu danych.
Nie wymaga Å¼adnych zewnÄ™trznych zaleÅ¼noÅ›ci.

ğŸ”¹ Funkcje
std::array<uint8_t, 64> kami512::hash(const std::string& input)

Opis:
Tworzy 512-bitowy hash z podanego ciÄ…gu znakÃ³w.
Zwraca wynik jako tablicÄ™ 64 bajtÃ³w (uint8_t[64]).

Parametry:

input â€” tekst wejÅ›ciowy do zhaszowania.

Zwraca:

Tablica 64 bajtÃ³w z wynikiem hashowania.

UÅ¼ycie:

auto raw = kami512::hash("test");

std::string kami512::hashHex(const std::string& input)

Opis:
Zwraca wynik hashowania jako ciÄ…g 128 znakÃ³w w zapisie szesnastkowym (hex).

Parametry:

input â€” tekst wejÅ›ciowy.

Zwraca:

std::string â€“ hash w formacie hex (np. "a3bff19c...").

UÅ¼ycie:

std::string hash = kami512::hashHex("mojehaslo");

bool kami512::compareHex(const std::string& hash1, const std::string& hash2)

Opis:
PorÃ³wnuje dwa ciÄ…gi hashÃ³w w formacie hex w sposÃ³b odporny na timing attacks (czas porÃ³wnania nie zaleÅ¼y od treÅ›ci).

Parametry:

hash1 â€” pierwszy hash (np. z bazy danych)

hash2 â€” drugi hash (np. obliczony z podanego hasÅ‚a)

Zwraca:

true jeÅ›li sÄ… identyczne,

false jeÅ›li rÃ³Å¼ne.

UÅ¼ycie:

if (kami512::compareHex(dbHash, kami512::hashHex(userInput))) {
    // hasÅ‚o poprawne
}

bool kami512::compareRaw(const std::array<uint8_t,64>& a, const std::array<uint8_t,64>& b)

Opis:
PorÃ³wnuje dwa 512-bitowe hashe w formacie binarnym.
DziaÅ‚a w czasie staÅ‚ym.

Parametry:

a â€” pierwszy hash (tablica 64 bajtÃ³w)

b â€” drugi hash

Zwraca:

true jeÅ›li identyczne,

false w przeciwnym wypadku.

ğŸ§  DziaÅ‚anie algorytmu (wersja uproszczona)

Dzieli wejÅ›cie na bajty.

KaÅ¼dy bajt jest mieszany (bitowe przesuniÄ™cia, XOR, dodawanie) z 64-elementowym stanem.

Po przetworzeniu caÅ‚oÅ›ci wykonuje dodatkowe rundy mieszania.

Wynik to 64 bajty (512 bitÃ³w).

ğŸ§© ModuÅ‚: KAMIAuth

Pliki: kami_auth.h, kami_auth.cpp
Opis: Warstwa zarzÄ…dzania uÅ¼ytkownikami.
Zawiera prostÄ… bazÄ™ (w pamiÄ™ci lub w pliku), ktÃ³ra przechowuje login i hash hasÅ‚a.

ğŸ”¹ Klasa: kami_auth::AuthDB
bool registerUser(const std::string& username, const std::string& password)

Opis:
Rejestruje nowego uÅ¼ytkownika.
Automatycznie hashuje podane hasÅ‚o przy uÅ¼yciu KAMI512.

Parametry:

username â€” nazwa uÅ¼ytkownika (unikalna),

password â€” hasÅ‚o w postaci tekstowej.

Zwraca:

true, jeÅ›li uÅ¼ytkownik zostaÅ‚ dodany,

false, jeÅ›li juÅ¼ istnieje w bazie.

DziaÅ‚anie:

Sprawdza, czy username juÅ¼ istnieje.

JeÅ›li nie, tworzy hash hasÅ‚a: hash = kami512::hashHex(password)

Zapisuje parÄ™ {username, hash} w mapie db_.

bool verifyUser(const std::string& username, const std::string& password) const

Opis:
Sprawdza, czy podany login i hasÅ‚o zgadzajÄ… siÄ™ z danymi w bazie.

Parametry:

username â€” login uÅ¼ytkownika,

password â€” hasÅ‚o do sprawdzenia.

Zwraca:

true â€“ jeÅ›li login istnieje i hash hasÅ‚a siÄ™ zgadza,

false â€“ w przeciwnym przypadku.

DziaÅ‚anie:

Wyszukuje uÅ¼ytkownika w mapie.

JeÅ›li istnieje, oblicza hash z podanego hasÅ‚a.

PorÃ³wnuje hash z zapisanym w bazie (kami512::compareHex()).

UÅ¼ycie:

if (db.verifyUser("jan", "tajnehaslo")) {
    std::cout << "Login OK\n";
}

bool userExists(const std::string& username) const

Opis:
Sprawdza, czy uÅ¼ytkownik o danym loginie istnieje w bazie.

Parametry:

username â€” login.

Zwraca:

true jeÅ›li istnieje,

false jeÅ›li nie.

bool saveToFile(const std::string& path) const

Opis:
Zapisuje aktualnÄ… zawartoÅ›Ä‡ bazy uÅ¼ytkownikÃ³w do pliku tekstowego.

Parametry:

path â€” Å›cieÅ¼ka do pliku (np. "users.db").

Format pliku:

login:hash


Zwraca:

true â€“ jeÅ›li zapis zakoÅ„czyÅ‚ siÄ™ sukcesem,

false â€“ jeÅ›li nie udaÅ‚o siÄ™ otworzyÄ‡ pliku.

bool loadFromFile(const std::string& path)

Opis:
Wczytuje dane uÅ¼ytkownikÃ³w z pliku w formacie login:hash.

Parametry:

path â€” Å›cieÅ¼ka do pliku.

Zwraca:

true, jeÅ›li plik udaÅ‚o siÄ™ poprawnie wczytaÄ‡,

false, jeÅ›li plik nie istnieje lub nie udaÅ‚o siÄ™ go otworzyÄ‡.

DziaÅ‚anie:

CzyÅ›ci aktualnÄ… bazÄ™ (db_).

Wczytuje kaÅ¼dÄ… liniÄ™ w formacie nazwa:hash.

Dodaje do mapy db_.

static std::string hashPassword(const std::string& password)

Opis:
Pomocnicza funkcja, ktÃ³ra zwraca hash hasÅ‚a w formacie hex.
UÅ¼ywa wewnÄ™trznie kami512::hashHex().

Parametry:

password â€” tekstowe hasÅ‚o.

Zwraca:

128-znakowy ciÄ…g hex (hash 512-bitowy).

UÅ¼ycie:

std::string h = kami_auth::AuthDB::hashPassword("12345");

ğŸ§± Pola prywatne
std::unordered_map<std::string, std::string> db_;

Przechowuje mapÄ™ uÅ¼ytkownikÃ³w:
klucz: login
wartoÅ›Ä‡: hash (w formacie hex)
